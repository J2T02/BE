// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace SWP.Models;

public partial class HIEM_MUONContext : DbContext
{
    public HIEM_MUONContext(DbContextOptions<HIEM_MUONContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<BioSample> BioSamples { get; set; }

    public virtual DbSet<BioType> BioTypes { get; set; }

    public virtual DbSet<Blog> Blogs { get; set; }

    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<Certificate> Certificates { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<DocCertificate> DocCertificates { get; set; }

    public virtual DbSet<Doctor> Doctors { get; set; }

    public virtual DbSet<DoctorSchedule> DoctorSchedules { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<MethodPayment> MethodPayments { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PaymentType> PaymentTypes { get; set; }

    public virtual DbSet<Remind> Reminds { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<SlotSchedule> SlotSchedules { get; set; }

    public virtual DbSet<Status> Statuses { get; set; }

    public virtual DbSet<StatusPayment> StatusPayments { get; set; }

    public virtual DbSet<StepDetail> StepDetails { get; set; }

    public virtual DbSet<Test> Tests { get; set; }

    public virtual DbSet<TestType> TestTypes { get; set; }

    public virtual DbSet<TreatmentPlan> TreatmentPlans { get; set; }

    public virtual DbSet<TreatmentStep> TreatmentSteps { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.AccId).HasName("PK__Account__A471AFDAB647753C");

            entity.ToTable("Account");

            entity.Property(e => e.AccId).HasColumnName("accId");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("createAt");
            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .HasColumnName("fullName");
            entity.Property(e => e.Img)
                .HasColumnType("text")
                .HasColumnName("img");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.Mail)
                .HasMaxLength(100)
                .HasColumnName("mail");
            entity.Property(e => e.Password)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("password");
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.RoleId).HasColumnName("roleId");

            entity.HasOne(d => d.Role).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK__Account__roleId__35BCFE0A");
        });

        modelBuilder.Entity<BioSample>(entity =>
        {
            entity.HasKey(e => e.BsId).HasName("PK__BioSampl__5338D47FEACA1F93");

            entity.ToTable("BioSample");

            entity.Property(e => e.BsId).HasColumnName("bsId");
            entity.Property(e => e.BsName)
                .HasMaxLength(100)
                .HasColumnName("bsName");
            entity.Property(e => e.BtId).HasColumnName("btId");
            entity.Property(e => e.CollectionDate).HasColumnName("collectionDate");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.Quality)
                .HasMaxLength(50)
                .HasColumnName("quality");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.StorageLocation)
                .HasMaxLength(100)
                .HasColumnName("storageLocation");
            entity.Property(e => e.TpId).HasColumnName("tpId");

            entity.HasOne(d => d.Bt).WithMany(p => p.BioSamples)
                .HasForeignKey(d => d.BtId)
                .HasConstraintName("FK__BioSample__btId__656C112C");

            entity.HasOne(d => d.Tp).WithMany(p => p.BioSamples)
                .HasForeignKey(d => d.TpId)
                .HasConstraintName("FK__BioSample__tpId__6477ECF3");
        });

        modelBuilder.Entity<BioType>(entity =>
        {
            entity.HasKey(e => e.BtId).HasName("PK__BioType__5276C666619D2099");

            entity.ToTable("BioType");

            entity.Property(e => e.BtId).HasColumnName("btId");
            entity.Property(e => e.BtName)
                .HasMaxLength(100)
                .HasColumnName("btName");
        });

        modelBuilder.Entity<Blog>(entity =>
        {
            entity.HasKey(e => e.BlogId).HasName("PK__Blog__FA0AA72DC17ABA1C");

            entity.ToTable("Blog");

            entity.Property(e => e.BlogId).HasColumnName("blogId");
            entity.Property(e => e.AuthorId).HasColumnName("authorId");
            entity.Property(e => e.Content)
                .HasColumnType("text")
                .HasColumnName("content");
            entity.Property(e => e.Img)
                .HasColumnType("text")
                .HasColumnName("img");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.PostDate).HasColumnName("postDate");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasColumnName("title");

            entity.HasOne(d => d.Author).WithMany(p => p.Blogs)
                .HasForeignKey(d => d.AuthorId)
                .HasConstraintName("FK__Blog__authorId__68487DD7");
        });

        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(e => e.BookingId).HasName("PK__Booking__C6D03BCDA2E0853D");

            entity.ToTable("Booking");

            entity.Property(e => e.BookingId).HasColumnName("bookingId");
            entity.Property(e => e.AccId).HasColumnName("accId");
            entity.Property(e => e.CreateAt)
                .HasColumnType("datetime")
                .HasColumnName("createAt");
            entity.Property(e => e.DocId).HasColumnName("docId");
            entity.Property(e => e.DsId).HasColumnName("dsId");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.Status).HasColumnName("status");

            entity.HasOne(d => d.Acc).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.AccId)
                .HasConstraintName("FK__Booking__accId__45F365D3");

            entity.HasOne(d => d.Doc).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.DocId)
                .HasConstraintName("FK__Booking__docId__46E78A0C");

            entity.HasOne(d => d.Ds).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.DsId)
                .HasConstraintName("FK__Booking__dsId__47DBAE45");
        });

        modelBuilder.Entity<Certificate>(entity =>
        {
            entity.HasKey(e => e.CerId).HasName("PK__Certific__22EED4632E2ADF0A");

            entity.ToTable("Certificate");

            entity.Property(e => e.CerId)
                .ValueGeneratedNever()
                .HasColumnName("cerId");
            entity.Property(e => e.CerName)
                .HasMaxLength(100)
                .HasColumnName("cerName");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CusId).HasName("PK__Customer__BA9897F3CB16B36D");

            entity.ToTable("Customer");

            entity.Property(e => e.CusId).HasColumnName("cusId");
            entity.Property(e => e.AccId).HasColumnName("accId");
            entity.Property(e => e.HusName)
                .HasMaxLength(100)
                .HasColumnName("husName");
            entity.Property(e => e.HusYob).HasColumnName("husYob");
            entity.Property(e => e.WifeName)
                .HasMaxLength(100)
                .HasColumnName("wifeName");
            entity.Property(e => e.WifeYob).HasColumnName("wifeYob");

            entity.HasOne(d => d.Acc).WithMany(p => p.Customers)
                .HasForeignKey(d => d.AccId)
                .HasConstraintName("FK__Customer__accId__38996AB5");
        });

        modelBuilder.Entity<DocCertificate>(entity =>
        {
            entity.HasKey(e => new { e.DocId, e.CerId }).HasName("PK__DocCerti__241729649B00FC5E");

            entity.ToTable("DocCertificate");

            entity.Property(e => e.DocId).HasColumnName("docId");
            entity.Property(e => e.CerId).HasColumnName("cerId");
            entity.Property(e => e.FilePath)
                .HasColumnType("text")
                .HasColumnName("filePath");

            entity.HasOne(d => d.Cer).WithMany(p => p.DocCertificates)
                .HasForeignKey(d => d.CerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DocCertif__cerId__3F466844");

            entity.HasOne(d => d.Doc).WithMany(p => p.DocCertificates)
                .HasForeignKey(d => d.DocId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DocCertif__docId__3E52440B");
        });

        modelBuilder.Entity<Doctor>(entity =>
        {
            entity.HasKey(e => e.DocId).HasName("PK__Doctor__0639C422E8180122");

            entity.ToTable("Doctor");

            entity.Property(e => e.DocId).HasColumnName("docId");
            entity.Property(e => e.AccId).HasColumnName("accId");
            entity.Property(e => e.DocName)
                .HasMaxLength(100)
                .HasColumnName("docName");
            entity.Property(e => e.Experience).HasColumnName("experience");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .HasColumnName("gender");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Yob).HasColumnName("yob");

            entity.HasOne(d => d.Acc).WithMany(p => p.Doctors)
                .HasForeignKey(d => d.AccId)
                .HasConstraintName("FK__Doctor__accId__3B75D760");
        });

        modelBuilder.Entity<DoctorSchedule>(entity =>
        {
            entity.HasKey(e => e.DsId).HasName("PK__DoctorSc__247E3DA76D931E20");

            entity.ToTable("DoctorSchedule");

            entity.Property(e => e.DsId).HasColumnName("dsId");
            entity.Property(e => e.DocId).HasColumnName("docId");
            entity.Property(e => e.IsAvailable).HasColumnName("isAvailable");
            entity.Property(e => e.MaxBooking).HasColumnName("maxBooking");
            entity.Property(e => e.SlotId).HasColumnName("slotId");
            entity.Property(e => e.WorkDate).HasColumnName("workDate");

            entity.HasOne(d => d.Doc).WithMany(p => p.DoctorSchedules)
                .HasForeignKey(d => d.DocId)
                .HasConstraintName("FK__DoctorSch__docId__4222D4EF");

            entity.HasOne(d => d.Slot).WithMany(p => p.DoctorSchedules)
                .HasForeignKey(d => d.SlotId)
                .HasConstraintName("FK__DoctorSch__slotI__4316F928");
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.HasKey(e => e.FbId).HasName("PK__Feedback__30B6057F26D75BD9");

            entity.ToTable("Feedback");

            entity.Property(e => e.FbId).HasColumnName("fbId");
            entity.Property(e => e.Content)
                .HasColumnType("text")
                .HasColumnName("content");
            entity.Property(e => e.DocId).HasColumnName("docId");
            entity.Property(e => e.Star).HasColumnName("star");
            entity.Property(e => e.TpId).HasColumnName("tpId");

            entity.HasOne(d => d.Doc).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.DocId)
                .HasConstraintName("FK__Feedback__docId__619B8048");

            entity.HasOne(d => d.Tp).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.TpId)
                .HasConstraintName("FK__Feedback__tpId__60A75C0F");
        });

        modelBuilder.Entity<MethodPayment>(entity =>
        {
            entity.HasKey(e => e.MethodId).HasName("PK__MethodPa__C7B34C89D6943F2B");

            entity.ToTable("MethodPayment");

            entity.Property(e => e.MethodId).HasColumnName("methodId");
            entity.Property(e => e.MethodName)
                .HasMaxLength(50)
                .HasColumnName("methodName");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__Payment__A0D9EFC6D21C3DB3");

            entity.ToTable("Payment");

            entity.Property(e => e.PaymentId).HasColumnName("paymentId");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("amount");
            entity.Property(e => e.BookingId).HasColumnName("bookingId");
            entity.Property(e => e.MethodId).HasColumnName("methodId");
            entity.Property(e => e.PaymentDate)
                .HasColumnType("datetime")
                .HasColumnName("paymentDate");
            entity.Property(e => e.PaymentTypeId).HasColumnName("paymentTypeId");
            entity.Property(e => e.StatusId).HasColumnName("statusId");
            entity.Property(e => e.TreatmentPlansId).HasColumnName("treatmentPlansId");

            entity.HasOne(d => d.Booking).WithMany(p => p.Payments)
                .HasForeignKey(d => d.BookingId)
                .HasConstraintName("FK__Payment__booking__6C190EBB");

            entity.HasOne(d => d.Method).WithMany(p => p.Payments)
                .HasForeignKey(d => d.MethodId)
                .HasConstraintName("FK__Payment__methodI__6E01572D");

            entity.HasOne(d => d.PaymentType).WithMany(p => p.Payments)
                .HasForeignKey(d => d.PaymentTypeId)
                .HasConstraintName("FK__Payment__payment__6B24EA82");

            entity.HasOne(d => d.Status).WithMany(p => p.Payments)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("FK__Payment__statusI__6EF57B66");

            entity.HasOne(d => d.TreatmentPlans).WithMany(p => p.Payments)
                .HasForeignKey(d => d.TreatmentPlansId)
                .HasConstraintName("FK__Payment__treatme__6D0D32F4");
        });

        modelBuilder.Entity<PaymentType>(entity =>
        {
            entity.HasKey(e => e.PaymentTypeId).HasName("PK__PaymentT__460ADCD2A34970A9");

            entity.ToTable("PaymentType");

            entity.Property(e => e.PaymentTypeId).HasColumnName("paymentTypeId");
            entity.Property(e => e.TypeName)
                .HasMaxLength(50)
                .HasColumnName("typeName");
        });

        modelBuilder.Entity<Remind>(entity =>
        {
            entity.HasKey(e => e.RemindId).HasName("PK__Remind__65CCEA2F07ECAEAD");

            entity.ToTable("Remind");

            entity.Property(e => e.RemindId).HasColumnName("remindId");
            entity.Property(e => e.IsTaken).HasColumnName("isTaken");
            entity.Property(e => e.Message)
                .HasColumnType("text")
                .HasColumnName("message");
            entity.Property(e => e.ReminderDay).HasColumnName("reminderDay");
            entity.Property(e => e.SdId).HasColumnName("sdId");

            entity.HasOne(d => d.Sd).WithMany(p => p.Reminds)
                .HasForeignKey(d => d.SdId)
                .HasConstraintName("FK__Remind__sdId__5DCAEF64");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Role__CD98462AC4BD406E");

            entity.ToTable("Role");

            entity.Property(e => e.RoleId).HasColumnName("roleId");
            entity.Property(e => e.RoleName)
                .HasMaxLength(50)
                .HasColumnName("roleName");
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity.HasKey(e => e.SerId).HasName("PK__Services__DFDAC530F8E541F2");

            entity.Property(e => e.SerId).HasColumnName("serId");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("price");
            entity.Property(e => e.SerName)
                .HasMaxLength(100)
                .HasColumnName("serName");
        });

        modelBuilder.Entity<SlotSchedule>(entity =>
        {
            entity.HasKey(e => e.SlotId).HasName("PK__SlotSche__9C4A67139E7DC667");

            entity.ToTable("SlotSchedule");

            entity.Property(e => e.SlotId).HasColumnName("slotId");
            entity.Property(e => e.SlotEnd).HasColumnName("slotEnd");
            entity.Property(e => e.SlotStart).HasColumnName("slotStart");
        });

        modelBuilder.Entity<Status>(entity =>
        {
            entity.HasKey(e => e.StatusId).HasName("PK__Status__36257A18C3214483");

            entity.ToTable("Status");

            entity.Property(e => e.StatusId)
                .ValueGeneratedNever()
                .HasColumnName("statusId");
            entity.Property(e => e.StatusName)
                .HasMaxLength(100)
                .HasColumnName("statusName");
        });

        modelBuilder.Entity<StatusPayment>(entity =>
        {
            entity.HasKey(e => e.StatusId).HasName("PK__StatusPa__36257A18F4351DF2");

            entity.ToTable("StatusPayment");

            entity.Property(e => e.StatusId).HasColumnName("statusId");
            entity.Property(e => e.StatusName)
                .HasMaxLength(50)
                .HasColumnName("statusName");
        });

        modelBuilder.Entity<StepDetail>(entity =>
        {
            entity.HasKey(e => e.SdId).HasName("PK__StepDeta__2CCB80E69F013841");

            entity.ToTable("StepDetail");

            entity.Property(e => e.SdId).HasColumnName("sdId");
            entity.Property(e => e.DocId).HasColumnName("docId");
            entity.Property(e => e.DoneDate).HasColumnName("doneDate");
            entity.Property(e => e.Dosage)
                .HasMaxLength(50)
                .HasColumnName("dosage");
            entity.Property(e => e.DrugName)
                .HasMaxLength(50)
                .HasColumnName("drugName");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.PlanDate).HasColumnName("planDate");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.StepName)
                .HasMaxLength(100)
                .HasColumnName("stepName");
            entity.Property(e => e.TpId).HasColumnName("tpId");
            entity.Property(e => e.TsId).HasColumnName("tsId");

            entity.HasOne(d => d.Doc).WithMany(p => p.StepDetails)
                .HasForeignKey(d => d.DocId)
                .HasConstraintName("FK__StepDetai__docId__5629CD9C");

            entity.HasOne(d => d.Tp).WithMany(p => p.StepDetails)
                .HasForeignKey(d => d.TpId)
                .HasConstraintName("FK__StepDetail__tpId__5441852A");

            entity.HasOne(d => d.Ts).WithMany(p => p.StepDetails)
                .HasForeignKey(d => d.TsId)
                .HasConstraintName("FK__StepDetail__tsId__5535A963");
        });

        modelBuilder.Entity<Test>(entity =>
        {
            entity.HasKey(e => e.TestId).HasName("PK__Test__A29BFB88E1FBC089");

            entity.ToTable("Test");

            entity.Property(e => e.TestId).HasColumnName("testId");
            entity.Property(e => e.CusId).HasColumnName("cusId");
            entity.Property(e => e.FilePath)
                .HasColumnType("text")
                .HasColumnName("filePath");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.Result)
                .HasColumnType("text")
                .HasColumnName("result");
            entity.Property(e => e.SdId).HasColumnName("sdId");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TestDate).HasColumnName("testDate");
            entity.Property(e => e.TestTypeId).HasColumnName("testTypeId");

            entity.HasOne(d => d.Cus).WithMany(p => p.Tests)
                .HasForeignKey(d => d.CusId)
                .HasConstraintName("FK__Test__cusId__59063A47");

            entity.HasOne(d => d.Sd).WithMany(p => p.Tests)
                .HasForeignKey(d => d.SdId)
                .HasConstraintName("FK__Test__sdId__5AEE82B9");

            entity.HasOne(d => d.TestType).WithMany(p => p.Tests)
                .HasForeignKey(d => d.TestTypeId)
                .HasConstraintName("FK__Test__testTypeId__59FA5E80");
        });

        modelBuilder.Entity<TestType>(entity =>
        {
            entity.HasKey(e => e.TestTypeId).HasName("PK__TestType__C3BB0189E95B5E90");

            entity.ToTable("TestType");

            entity.Property(e => e.TestTypeId).HasColumnName("testTypeId");
            entity.Property(e => e.Person)
                .HasMaxLength(10)
                .HasColumnName("person");
            entity.Property(e => e.TestName)
                .HasMaxLength(100)
                .HasColumnName("testName");
        });

        modelBuilder.Entity<TreatmentPlan>(entity =>
        {
            entity.HasKey(e => e.TpId).HasName("PK__Treatmen__E1B86D6B263847D4");

            entity.Property(e => e.TpId).HasColumnName("tpId");
            entity.Property(e => e.CusId).HasColumnName("cusId");
            entity.Property(e => e.DocId).HasColumnName("docId");
            entity.Property(e => e.EndDate).HasColumnName("endDate");
            entity.Property(e => e.SerId).HasColumnName("serId");
            entity.Property(e => e.StartDate).HasColumnName("startDate");
            entity.Property(e => e.Status).HasColumnName("status");

            entity.HasOne(d => d.Cus).WithMany(p => p.TreatmentPlans)
                .HasForeignKey(d => d.CusId)
                .HasConstraintName("FK__Treatment__cusId__5070F446");

            entity.HasOne(d => d.Doc).WithMany(p => p.TreatmentPlans)
                .HasForeignKey(d => d.DocId)
                .HasConstraintName("FK__Treatment__docId__5165187F");

            entity.HasOne(d => d.Ser).WithMany(p => p.TreatmentPlans)
                .HasForeignKey(d => d.SerId)
                .HasConstraintName("FK__Treatment__serId__4F7CD00D");
        });

        modelBuilder.Entity<TreatmentStep>(entity =>
        {
            entity.HasKey(e => e.TsId).HasName("PK__Treatmen__9C73E94B65150567");

            entity.ToTable("TreatmentStep");

            entity.Property(e => e.TsId).HasColumnName("tsId");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.SerId).HasColumnName("serId");
            entity.Property(e => e.StepName)
                .HasMaxLength(100)
                .HasColumnName("stepName");

            entity.HasOne(d => d.Ser).WithMany(p => p.TreatmentSteps)
                .HasForeignKey(d => d.SerId)
                .HasConstraintName("FK__Treatment__serId__4CA06362");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}